#!/bin/bash
#
# Boot Configuration Optimization Script for Ubuntu 25.10 with Dracut
#
# This script optimizes the dracut and boot configuration for Ubuntu 25.10
# with ZFS root mirror, ensuring optimal boot performance and reliability.
#
# PREREQUISITES:
# - System successfully booted on Ubuntu 25.10 with dracut
# - 04-post-upgrade-dracut.sh completed
# - ZFS pool healthy
#
# USAGE: sudo ./05-boot-optimization.sh
#

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "${CYAN}[STEP]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    log_error "This script must be run as root (use sudo)"
    exit 1
fi

# Configuration
OPTIMIZATION_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
LOG_DIR="$(dirname "$(readlink -f "$0")")/logs"
mkdir -p "${LOG_DIR}"

# Set up logging
OPTIMIZATION_LOG="${LOG_DIR}/05-optimization-${OPTIMIZATION_TIMESTAMP}.log"
exec > >(tee -a "${OPTIMIZATION_LOG}") 2>&1

log_info "============================================================"
log_info "Ubuntu 25.10 Boot Optimization Script"
log_info "Started: $(date)"
log_info "============================================================"
echo ""

# ============================================================================
# STEP 1: Verification
# ============================================================================
log_step "Step 1: Verifying system state..."

# Verify Ubuntu 25.10
if ! grep -q "VERSION_ID=\"25.10\"" /etc/os-release; then
    log_error "This script is for Ubuntu 25.10 only"
    exit 1
fi
log_info "✓ Ubuntu 25.10: $(lsb_release -ds)"

# Verify dracut is installed
if ! command -v dracut &>/dev/null; then
    log_error "Dracut not installed. Run 04-post-upgrade-dracut.sh first"
    exit 1
fi
log_info "✓ Dracut installed"

# Verify ZFS pool
if ! zpool list rpool &>/dev/null; then
    log_error "ZFS pool 'rpool' not found"
    exit 1
fi

POOL_HEALTH=$(zpool list -H -o health rpool)
if [[ "${POOL_HEALTH}" != "ONLINE" ]]; then
    log_error "ZFS pool health is ${POOL_HEALTH}"
    exit 1
fi
log_info "✓ ZFS pool rpool is ONLINE"

# Verify current initramfs was built with dracut
CURRENT_KERNEL=$(uname -r)
if ! lsinitrd "/boot/initrd.img-${CURRENT_KERNEL}" &>/dev/null; then
    log_error "Cannot inspect current initramfs"
    exit 1
fi
log_info "✓ Current kernel: ${CURRENT_KERNEL}"
log_info "✓ Booted successfully with dracut"

echo ""

# ============================================================================
# STEP 2: Optimize Dracut Configuration
# ============================================================================
log_step "Step 2: Optimizing dracut configuration..."

# Create optimized dracut configuration
cat > /etc/dracut.conf.d/90-zfs-optimization.conf << 'EOF'
# ZFS Root Mirror Optimization Configuration
# Generated by ubuntu-noble-to-questing optimization script

# Compression for smaller initramfs (faster loading)
compress="zstd"

# Host-only mode (smaller, faster initramfs)
# Includes only drivers needed for this specific hardware
hostonly="yes"

# Don't hardcode kernel command line into initramfs
# This allows GRUB to control boot parameters
hostonly_cmdline="no"

# Parallel operations during boot
parallel="yes"

# Show boot progress (can be disabled once stable)
# Set to "0" for quiet boot, "6" for detailed debug
stdloglvl=4

# Early microcode loading for Intel/AMD CPUs
early_microcode="yes"

# Add useful modules for recovery
add_dracutmodules+=" bash crypt dm zfs "

# Network support for remote management (if needed)
# Uncomment if you need network in initramfs:
# add_dracutmodules+=" network "

# Emergency shell timeout (seconds to wait before dropping to shell)
rd_emergency_timeout=180
EOF

log_info "✓ Created /etc/dracut.conf.d/90-zfs-optimization.conf"

# If using HWE kernel, optimize firmware loading
KERNEL_VERSION=$(uname -r)
if [[ "${KERNEL_VERSION}" == *"-hwe-"* ]] || [[ "${KERNEL_VERSION}" == *"-generic-hwe-"* ]]; then
    log_info "HWE kernel detected, optimizing firmware configuration..."

    cat > /etc/dracut.conf.d/91-firmware-optimization.conf << 'EOF'
# Firmware Optimization for HWE Kernel
# Only include firmware for detected hardware

# Use hostonly mode to reduce firmware size
hostonly="yes"

# Firmware loading optimization
firmware_path="/lib/firmware"

# Early firmware loading for better hardware support
early_microcode="yes"
EOF

    log_info "✓ Created /etc/dracut.conf.d/91-firmware-optimization.conf"
fi

echo ""

# ============================================================================
# STEP 3: Optimize ZFS Boot Parameters
# ============================================================================
log_step "Step 3: Optimizing ZFS boot parameters..."

# Check current kernel parameters
log_info "Current kernel parameters:"
cat /proc/cmdline

# Backup GRUB configuration
cp /etc/default/grub "/etc/default/grub.backup-${OPTIMIZATION_TIMESTAMP}"
log_info "✓ Backed up /etc/default/grub"

# Optimize GRUB parameters for ZFS
log_info "Optimizing GRUB parameters..."

# Remove any lingering zfs_force=1 (should only be on first boot)
sed -i 's/ zfs_force=1//g' /etc/default/grub

# Ensure reasonable timeout
if ! grep -q "^GRUB_TIMEOUT=" /etc/default/grub; then
    echo "GRUB_TIMEOUT=5" >> /etc/default/grub
    log_info "✓ Set GRUB_TIMEOUT=5"
else
    log_info "GRUB_TIMEOUT already configured"
fi

# Add useful kernel parameters if not present
CMDLINE_LINUX_DEFAULT=$(grep "^GRUB_CMDLINE_LINUX_DEFAULT=" /etc/default/grub || echo "")

# Check if we need to add parameters
NEEDS_UPDATE=false

if ! echo "${CMDLINE_LINUX_DEFAULT}" | grep -q "rootfstype=zfs"; then
    NEEDS_UPDATE=true
fi

if [[ "${NEEDS_UPDATE}" == "true" ]]; then
    log_info "Adding ZFS-specific kernel parameters..."

    # Get current parameters
    CURRENT_PARAMS=$(grep "^GRUB_CMDLINE_LINUX_DEFAULT=" /etc/default/grub | cut -d'"' -f2)

    # Add rootfstype=zfs if not present
    if ! echo "${CURRENT_PARAMS}" | grep -q "rootfstype=zfs"; then
        CURRENT_PARAMS="${CURRENT_PARAMS} rootfstype=zfs"
    fi

    # Update GRUB configuration
    sed -i "s|^GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT=\"${CURRENT_PARAMS}\"|" /etc/default/grub

    log_info "✓ Updated kernel parameters"
else
    log_info "Kernel parameters already optimal"
fi

echo ""

# ============================================================================
# STEP 4: Regenerate Initramfs with Optimizations
# ============================================================================
log_step "Step 4: Regenerating initramfs with optimizations..."

# Get all installed kernels
INSTALLED_KERNELS=$(ls /lib/modules/ | grep -E '^[0-9]' || true)

log_info "Regenerating optimized initramfs for all kernels..."
for kernel in ${INSTALLED_KERNELS}; do
    log_info "Regenerating for ${kernel}..."

    # Show size before
    if [[ -f "/boot/initrd.img-${kernel}" ]]; then
        OLD_SIZE=$(du -h "/boot/initrd.img-${kernel}" | cut -f1)
        log_info "  Old size: ${OLD_SIZE}"
    fi

    # Regenerate
    if dracut --force --kver "${kernel}"; then
        NEW_SIZE=$(du -h "/boot/initrd.img-${kernel}" | cut -f1)
        log_info "  ✓ New size: ${NEW_SIZE}"
    else
        log_error "Failed to regenerate initramfs for ${kernel}"
        exit 1
    fi
done

echo ""

# ============================================================================
# STEP 5: Update GRUB and Sync Mirrors
# ============================================================================
log_step "Step 5: Updating GRUB configuration..."

# Regenerate GRUB configuration
if update-grub; then
    log_info "✓ GRUB configuration updated"
else
    log_error "Failed to update GRUB"
    exit 1
fi

# Sync to all mirror drives
log_info "Syncing boot configuration to all mirror drives..."
if /usr/local/bin/sync-mirror-boot; then
    log_info "✓ Boot mirrors synchronized"
else
    log_warn "Boot mirror sync had issues"
fi

echo ""

# ============================================================================
# STEP 6: Verify Boot Configuration
# ============================================================================
log_step "Step 6: Verifying boot configuration..."

# Check EFI boot entries
if command -v efibootmgr &>/dev/null; then
    log_info "EFI boot entries:"
    efibootmgr | grep "Ubuntu" || log_warn "No Ubuntu entries found"

    BOOT_ENTRIES=$(efibootmgr | grep -c "Ubuntu" || echo "0")
    if [[ ${BOOT_ENTRIES} -ge 3 ]]; then
        log_info "✓ Found ${BOOT_ENTRIES} boot entries (expected 3: Rotating + 2 static)"
    else
        log_warn "Found ${BOOT_ENTRIES} boot entries (expected 3)"
    fi
fi

# Verify GRUB configuration
if [[ -f /boot/grub/grub.cfg ]]; then
    log_info "✓ GRUB configuration exists"

    # Check for zfs_force=1 (should not be present after first boot)
    if grep -q "zfs_force=1" /boot/grub/grub.cfg; then
        log_warn "Found zfs_force=1 in GRUB config (should only be on first boot)"
        log_warn "This will be removed on next GRUB update"
    else
        log_info "✓ No zfs_force=1 in GRUB config (correct)"
    fi
fi

# Check dracut modules in initramfs
log_info "Verifying dracut modules in initramfs..."
if lsinitrd "/boot/initrd.img-${CURRENT_KERNEL}" 2>/dev/null | head -20 | grep -q "dracut"; then
    log_info "✓ Initramfs built with dracut"
fi

echo ""

# ============================================================================
# STEP 7: Configure Systemd Boot Services
# ============================================================================
log_step "Step 7: Optimizing systemd boot services..."

# Ensure ZFS services are enabled
ZFS_SERVICES=(
    "zfs-import-cache.service"
    "zfs-import.target"
    "zfs-mount.service"
    "zfs.target"
)

for service in "${ZFS_SERVICES[@]}"; do
    if systemctl is-enabled "${service}" &>/dev/null; then
        log_info "✓ ${service} is enabled"
    else
        log_warn "${service} not enabled, enabling..."
        systemctl enable "${service}" || log_warn "Could not enable ${service}"
    fi
done

# Check boot time
if command -v systemd-analyze &>/dev/null; then
    log_info "Current boot time:"
    systemd-analyze || log_warn "Could not analyze boot time"
fi

echo ""

# ============================================================================
# STEP 8: Create Optimization Summary
# ============================================================================
log_step "Step 8: Creating optimization summary..."

SUMMARY_FILE="/root/boot-optimization-summary-${OPTIMIZATION_TIMESTAMP}.txt"

cat > "${SUMMARY_FILE}" << EOF
================================================================================
BOOT OPTIMIZATION SUMMARY
================================================================================

Optimization Date: $(date)
Hostname: $(hostname)
Ubuntu Version: $(lsb_release -ds)
Kernel: $(uname -r)

================================================================================
OPTIMIZATIONS APPLIED
================================================================================

✓ Dracut configuration optimized
  - Compression: zstd
  - Hostonly mode: yes
  - Parallel operations: yes
  - Early microcode: yes

✓ GRUB parameters optimized
  - rootfstype=zfs added
  - zfs_force=1 removed (if present)
  - Timeout configured

✓ Initramfs regenerated
  - All kernels updated with optimizations
  - Reduced size with hostonly mode

✓ Boot mirrors synchronized
  - GRUB installed on all drives
  - EFI entries verified

✓ Systemd services verified
  - ZFS import/mount services enabled

================================================================================
DRACUT CONFIGURATION
================================================================================

Main configuration: /etc/dracut.conf.d/90-zfs-optimization.conf
$(cat /etc/dracut.conf.d/90-zfs-optimization.conf)

$(if [[ -f /etc/dracut.conf.d/91-firmware-optimization.conf ]]; then
    echo "Firmware optimization: /etc/dracut.conf.d/91-firmware-optimization.conf"
    cat /etc/dracut.conf.d/91-firmware-optimization.conf
fi)

================================================================================
GRUB CONFIGURATION
================================================================================

$(grep -v "^#" /etc/default/grub | grep -v "^$")

================================================================================
KERNEL PARAMETERS
================================================================================

$(cat /proc/cmdline)

================================================================================
INITRAMFS FILES
================================================================================

$(ls -lh /boot/initrd.img-*)

================================================================================
EFI BOOT ENTRIES
================================================================================

$(efibootmgr 2>/dev/null || echo "efibootmgr not available")

================================================================================
SYSTEMD BOOT ANALYSIS
================================================================================

$(systemd-analyze 2>/dev/null || echo "systemd-analyze not available")

================================================================================
NEXT STEPS
================================================================================

1. Test reboot to verify optimizations:
   sudo reboot

2. After reboot, run comprehensive tests:
   sudo ./06-testing-validation.sh

3. Monitor boot performance:
   systemd-analyze
   systemd-analyze blame

4. For future kernel updates, dracut will automatically:
   - Use optimized configuration
   - Regenerate initramfs via kernel hooks
   - Sync to all mirror drives

================================================================================
FINE-TUNING OPTIONS
================================================================================

To disable boot messages for cleaner boot:
  1. Edit /etc/dracut.conf.d/90-zfs-optimization.conf
  2. Set: stdloglvl=0
  3. Set: quiet="yes"
  4. Regenerate: sudo dracut --force --kver $(uname -r)
  5. Update GRUB: sudo update-grub

To add network support in initramfs (for remote unlock):
  1. Edit /etc/dracut.conf.d/90-zfs-optimization.conf
  2. Uncomment: add_dracutmodules+=" network "
  3. Regenerate initramfs and update GRUB

================================================================================
EOF

log_info "✓ Optimization summary: ${SUMMARY_FILE}"

echo ""

# ============================================================================
# Summary
# ============================================================================

log_info "============================================================"
log_info "BOOT OPTIMIZATION COMPLETE"
log_info "============================================================"
echo ""
log_info "Optimizations applied:"
log_info "  ✓ Dracut configuration optimized"
log_info "  ✓ GRUB parameters tuned for ZFS"
log_info "  ✓ Initramfs regenerated with optimizations"
log_info "  ✓ Boot mirrors synchronized"
log_info "  ✓ Systemd services verified"
echo ""
log_info "Summary: ${SUMMARY_FILE}"
log_info "Log file: ${OPTIMIZATION_LOG}"
echo ""
log_info "Next steps:"
echo "  1. Test reboot: sudo reboot"
echo "  2. After reboot, run: sudo ./06-testing-validation.sh"
echo ""

read -p "Reboot now to test optimizations? (yes/no): " reboot_confirm
if [[ "${reboot_confirm}" == "yes" ]]; then
    log_info "Rebooting in 10 seconds..."
    log_info "After reboot, run: sudo ./06-testing-validation.sh"
    sleep 10
    reboot
else
    log_info "Please reboot when ready to test optimizations"
    log_info "After reboot, run: sudo ./06-testing-validation.sh"
fi

log_info "Boot optimization script completed: $(date)"
log_info "============================================================"

exit 0
